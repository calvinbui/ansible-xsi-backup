#!/bin/sh

getHostIP(){
    echo "$( ping -c 1 "${1}" 2>/dev/null | head -n1 | awk -F "(" '{print $2}' | awk -F ")" '{print $1}' )"	
}

runRemCmd(){
    RET="$( ( eval ssh "$SSHOPTS" -p$2 $defremusr@$1 "$3" ) 2>&1 )"
    RET="$( echo "$RET" | sed '/FIPS mode initialized/d' )"
}

sizeOf(){
    SIZEOF="$( stat "${1}" | grep "Size:" | awk -F ':' '{print $2}' | awk '{print $1}' | sed -e 's/^ *//g' -e 's/ *$//g' )"
    echo "${SIZEOF}"	
}

getXSIFDval(){
    xsival="$( cat /tmp/.xsifd${2} | grep "$1" | awk -F '=' '{print $2}' )"
    echo "${xsival}"
}

isDSRoot(){
    path2chk="$( echo "$1" | sed -e 's/^ *//g' -e 's/ *$//g' )"
    path2chk="${path2chk%/}"
    IFS=${newline}
    isDSroot=0
    DFOUT="$(df -h)"
    for ds in $DFOUT
    do
        dsp="$( echo "$ds" | awk '{print $6}' | sed -e 's/^ *//g' -e 's/ *$//g' )"
        if [ "$path2chk" == "$dsp" ]
        then
            isDSroot=1
            break
        fi
    done
    echo "${isDSroot}"
}

getSha1Zero(){
    if [ "$1" == "10485760" ]
    then
        echo "8c206a1a87599f532ce68675536f0b1546900d7a"
    elif [ "$1" == "20971520" ]
    then
        echo "9674344c90c2f0646f0b78026e127c9b86e3ad77"
    elif [ "$1" == "52428800" ]
    then
        echo "49886561f8e26ed5e2ae549897a28aaab44881bd"
    fi
}

blockHasData(){
    
    #echo "1"
    #return 0
    
    if [ "${1}" == "0" ]
    then    
	echo "1"
    else
	if [ ! -f "${1}" ]
	then
		echo "Can't find extent map at ${1}"
	fi
	posn="$2"
	bsiz="$3"
	chunk_data="$( cat "${1}" | awk -F ':' '$1 <= '${posn} | tail -n1 )"
	chunk_posn="$( echo "${chunk_data}" | awk -F ':' '{print $1}' )"
	chunk_size="$( echo "${chunk_data}" | awk -F ':' '{print $2}' )"
	chunk_stat="$( echo "${chunk_data}" | awk -F ':' '{print $3}' )"
	last_exten="$( tail -n1 "${1}" | awk -F ':' '{print $1}' )"
	if [ "${chunk_stat}" == "VMFS" ]
	then
	    echo "1" 
	else
	    if [ "$( python -c "print( ${posn}+${bsiz} <= ${chunk_posn}+${chunk_size} )" | awk '{print tolower($0)}' )" == "true" ]
	    then
	    	echo "0"
	    else
	    	#echo "1"
	    	#return 0	
		outcome="0"
	    	while [ "$( python -c "print( ${chunk_posn}+${chunk_size} <= ${posn}+${bsiz} )" | awk '{print tolower($0)}' )" == "true" -a "${chunk_posn}" != "${last_exten}" ]
		do
	    	    chunk_data="$( cat "${1}" | awk -F ':' '$1 > '${chunk_posn} | head -n1 )"
	    	    if [ "${chunk_data}" != "" ]
		    then
		    	chunk_posn="$( echo "${chunk_data}" | awk -F ':' '{print $1}' )"
	    	    	chunk_size="$( echo "${chunk_data}" | awk -F ':' '{print $2}' )"
	    	    	chunk_stat="$( echo "${chunk_data}" | awk -F ':' '{print $3}' )"
		    	if [ "${chunk_stat}" == "VMFS" ]
		    	then
		    	    outcome="1"
		    	    break	
		    	fi
		    fi
		done
		echo "${outcome}"
	    fi
	fi
    fi    
}


isRemotePath(){
    echo "$1" | grep -E "^([0-9]{1,3}\.){3}[0-9]{1,3}:[0-9]{1,5}:/.*$" | wc -l	
}

getVMDir(){
    if [ -z "$2" ] || [ $( echo "$2" | grep -oE "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$" | wc -l ) -eq 0 ]
    then
	d=$(vim-cmd vmsvc/get.filelayout $1 | grep vmPathName | awk -F '=' '{print $2}' | awk -F ']' '{print $2}' | sed -e 's/\"//g' -e 's/\,//g' -e 's/^ *//g' -e 's/ *$//g')
	VMDIR=$( dirname "$d" )
    else
	if [ "$3" -eq "$3" ]2>/dev/null
	then
	    port="$3"
	else
	    port="22"
	fi
	VMDIR=$(eval ssh "$SSHOPTS" -p "$3" ${defremusr}@"$2" "vim-cmd vmsvc/get.filelayout $1 | grep vmPathName | awk -F '=' '{print \$2}' | awk -F '\]' '{print \$2}' | sed -e 's/\"//g' -e 's/\,//g' -e 's/^ *//g' -e 's/ *$//g'" 2>/dev/null) 
	VMDIR="$( echo "$VMDIR" | sed '/FIPS mode initialized/d' )"
    fi
    echo "$VMDIR"
}

getVMId(){

	VMId="$( vim-cmd vmsvc/getallvms | sed 1d | awk -F '[' '{print $1}' | sed -e 's/^ *//g' -e 's/ *$//g' | grep "${1}$" | awk '{print $1}' )"
    echo "$VMId" 
	
}

getVMName(){

	if [ -z "$2" ] || [ $( echo "$2" | grep -oE "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$" | wc -l ) -eq 0 ]
	then
		VMNAME=$( vim-cmd vmsvc/get.config $1 | grep name | head -n1 | awk -F '=' '{print $2}' | awk -F ',' '{print $1}' | sed -e 's/^ *//g' -e 's/ *$//g' -e 's/\"//g' )
	else
		if [ "$3" -eq "$3" ] 2>/dev/null
		then
			port="$3"
		else
			port="22"
		fi
		VMNAME=$( eval ssh "$SSHOPTS" -p "$3" ${defremusr}@"$2" "vim-cmd vmsvc/get.config $1 | grep name | head -n1 | awk -F '=' '{print \$2}'| awk -F '\,' '{print \$1}'| sed -e 's/^ *//g' -e 's/ *$//g' -e 's/\"//g'" 2>/dev/null )
		VMNAME="$( echo "$VMNAME" | sed '/FIPS mode initialized/d' )"
	fi
	echo "$VMNAME"
        
}

getVMXFile(){

    vmxDir="$( getVMXDir "$1" )"
    vmxFle="$( ls -1 "$vmxDir"/*.vmx )"
    if [ -f "$vmxFle" ]
    then
        echo "$vmxFle"
    else
        echo "NULL"
    fi

}

getVMXDir(){

    vmid=$1
    dss=$( vim-cmd vmsvc/getallvms | awk '$1=='$vmid | awk -F '[' '{print $2}' | awk -F ']' '{print $1}' )
    fps=$( vim-cmd vmsvc/getallvms | awk '$1=='$vmid | awk -F ']' '{print $2}' | awk -F '.vmx' '{print $1.vmx}' | sed -e 's/^ *//g' -e 's/ *$//g' )
    theVMXFilePath="/vmfs/volumes/$dss/$fps"
    theVMXDir=$( dirname "$theVMXFilePath" )
    if [ -d "$theVMXDir" ]
    then
        echo "$theVMXDir"
    else
        $( ERR $? "Error getting the VMX dir for VM: $vmid. You might have deleted the VM files, but the VM is still registered." )
    fi

}

getVMDatastoresById(){
    DSs1="$( vim-cmd vmsvc/get.filelayout $1 | grep -E '^[ \t].*\"\[.*.vmdk.*' | awk -F'[][]' '{print $2}' | sort -u )"
	DSs2="$( vim-cmd vmsvc/get.filelayout $1 | grep "Directory" | grep -v "<unset>" | awk -F '=' '{print $2}'  | awk -F']' '{print $1}' | awk -F'[' '{print $2}' )"
    DSs="$( echo -e "${DSs1}\n${DSs2}" | sort -u )"
	echo "$DSs"	
}

getVMFoldersById(){
    DStores="$( getVMDatastoresById $1 )"
    vmFolders1="$( vim-cmd vmsvc/get.filelayout $1 | grep -E '^[ \t].*\"\[.*.vmdk.*' | sed -e 's/\"//g' -e 's/\,//g' -e 's/\[//g' -e 's/\] /\//g' | \
     awk '{print $0}' | sed -e 's/^ *//g' -e 's/ *$//g' | awk '{print "/vmfs/volumes/"$0}' | awk -F '/' 'sub(FS $NF,x)' | sort -u )"
    vmDirs2="$( vim-cmd vmsvc/get.filelayout $1 | grep "Directory" | grep -v "<unset>" | awk -F '=' '{print $2}' | awk -F ']' '{print $2}' | \
     sed -e 's/\"//g' -e 's/\ //g' -e 's/,//g' | sort -u )"
    for d in $vmDirs2
    do
        for s in $DStores
        do
            vmFolders2="$( echo -e "${vmFolders2}\n/vmfs/volumes/${s}/${d}" )"
        done
    done
    vmFolders="$( echo -e "${vmFolders1}\n${vmFolders2}" | sed '/^\s*$/d' | sort -u )"
    echo "$vmFolders"
}

getVMDiskExclusions(){
    vmname="$( getVMName $1 )"
    IFS=","
    for evm in $backupvms
    do
        evmn="$( echo "$evm" | awk -F '!' '{print $1}' )"
        exvm="$( echo "$evm" | awk -F '!' '{print $2}' )"
        if [ "$evmn" == "$vmname" -a "$exvm" != "" ]
        then
            vmdk2exclude="$exvm"
        fi
    done
    IFS=$OLDIFS
    echo "${vmdk2exclude//.vmdk/}"
}

isDiskExcluded(){
    vmdk2exclude="$( getVMDiskExclusions $1 )"
    echo "$( echo "$vmdk2exclude" | awk -F ';' -v a="(-[0-9]{6})?(-flat|-sesparse|-delta)?.vmdk" -v b="$2" '{for(i=1;i<=NF;i++){if(b~$i a){print $i}}}' | wc -l )"
}

crond_reinit(){

	while [ "$( ps -c | grep "busybox crond" | grep -v "grep" | wc -l )" -ne "1" ]
	do
		echo "Number of crond instances is $( ps -c | grep "busybox crond" | grep -v "grep" | wc -l ), reinitializing service..."
		CSPIDS="$( ps -c | grep "busybox crond" | grep -v "grep" | awk '{print $1}' )"
		for cspid in $CSPIDS
		do
			kill -9 "$cspid"
			echo "Killed instance with PID ${cspid}"
		done
		CCROND="$( /usr/lib/vmware/busybox/bin/busybox crond 2>&1 )"
		if [ "$CCROND" == "" ]
		then
			echo "Crond service was reinitialized"
			break
		fi
	done

	if [ "$( ps -c | grep "busybox crond" | grep -v "grep" | wc -l )" -eq "1" ]
	then
		echo "Current number of crond instances is 1, service seems to be running O.K."
	fi

}

rotate_log(){
    if [ "$rotate_log_size" -eq "$rotate_log_size" ] 2>/dev/null
    then
    	:
    else
    	rotate_log_size="50"
    fi 	
    if [ ! -f "$1" ]
    then
        touch "$1"
    fi
    if [ "$( du -m "$1" | awk '{print $1}' )" -gt "$rotate_log_size" ]
    then
    	nfn="$( dirname "$1" )"/"$( basename "$1" ).$(date +%s)"
    	mv "$1" "$nfn"	
    fi	
}

gen_rsa_keys(){
    if [ ! -f "$PWD"/xsibackup_id_rsa ]
    then
	/usr/lib/vmware/openssh/bin/ssh-keygen -t rsa -f "$PWD"/xsibackup_id_rsa -q -N ''
    fi
}

installCron(){
    if [ "$1" == "" ]
    then
        cronuser="root"
    else
        cronuser="$1"
    fi
    if [ "$( cat /etc/rc.local.d/local.sh | grep "cron-init\" ${cronuser}" | wc -l )" -eq "0" ]
    then
        if [ ! -f /var/spool/cron/crontabs/${cronuser} ]
        then
       	    if [ "${cronuser}" != "root" ]
       	    then
       	    	touch /var/spool/cron/crontabs/${cronuser} && chmod 0750 /var/spool/cron/crontabs/${cronuser}	 
            fi
        fi
        INSTCRON="$( sed -i '/xsibackup-cron.log/d' /etc/rc.local.d/local.sh 2>&1 && \
        sed -i '/xsibackup-cron.log/d' /var/spool/cron/crontabs/${cronuser} 2>&1 && \
        sed -i '/exit 0/d' /etc/rc.local.d/local.sh 2>&1 && \
        echo "\"${PWD}/src/cron-init\" ${cronuser}" >> /etc/rc.local.d/local.sh 2>&1 && \
        echo "exit 0" >> /etc/rc.local.d/local.sh 2>&1 )"
        if [ "${#INSTCRON}" -eq "0" ]
        then
            SETCRON="$( setCrontab ${cronuser} )"
            if [ "$?" -gt "0" ]
            then
                INSTCRON="${INSTCRON}\n${SETCRON}"
            fi
        fi
        if [ "${#INSTCRON}" -eq "0" ]
        then
            echo "The ${cronuser} user crontab has been successfully installed"
        else
            echo "A problem ocurred while installing the ${cronuser} crontab, details: $INSTCRON"
        fi
    else
        echo "The ${cronuser} crontab is already installed, use --remove-cron --cron-user=${cronuser} to remove it in the command line"
    fi
}

removeCron(){
    if [ "$1" == "" ]
    then
        cronuser="root"
    else
        cronuser="$1"
    fi
    if [ "$( cat /etc/rc.local.d/local.sh | grep "cron-init\" ${cronuser}" | wc -l )" -gt "0" ]
    then
        REMCRON="$( sed -i "/cron-init\" ${cronuser}/d" /etc/rc.local.d/local.sh 2>&1 )"
        if [ "${#REMCRON}" -gt "0" ]
        then
            RCRONERR="An error ocurred while removing the ${cronuser} initialization at /etc/rc.local.d/local.sh, details: ${REMCRON}\n"
        fi
    fi
    REMJOBS="$( sed -i '/\/jobs\//d' /var/spool/cron/crontabs/${cronuser} 2>&1 )"
    if [ "${#REMJOBS}" -gt "0" ]
    then
   	RCRONERR="${RCRONERR}Error removing jobs from /var/spool/cron/crontabs/${cronuser}" 
    fi
    if [ "${#RCRONERR}" -gt "0" ]
    then
    	 echo -e "$RCRONERR"	
    else
   	 echo "The ${cronuser} crontab was succesfully removed from /etc/rc.local.d/local.sh" 
    fi
}

setCrontab(){
    if [ "$1" == "" ]
    then
    	cronuser="root"
    else
    	cronuser="$1"
    fi
    chmod 0700 /var/spool/cron/crontabs/${cronuser} && \
    sed -i '/\/jobs\//d' /var/spool/cron/crontabs/${cronuser} && \
    if [ ! -f "$PWD"/conf/${cronuser}-crontab ]
    then
    	touch "$PWD"/conf/${cronuser}-crontab
    fi
    ADDCRON="$( cat "$PWD"/conf/${cronuser}-crontab | grep -v "^#" | sed '/^$/d' )" && \
    if [ "${#ADDCRON}" -gt "0" ]
    then
    	echo "$ADDCRON" >> /var/spool/cron/crontabs/${cronuser}
    	if [ "$?" -eq "0" ]
    	then
    	    echo "The ${cronuser} user crontab has been succesfully updated"
    	else
    	    echo "An error has accurred while trying to update the ${cronuser} user crontab"
    	fi
    else
    	echo "Nothing to add to ${cronuser} user crontab"	
    fi
}

getTestEmailHTML(){

    checkHTML="<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>
        <head>
        <title>XSIBACKUP "$APPVER" TEST E-MAIL</title>
        <style type="text/css">
           body {
               font-family: Verdana, Arial, sans-serif;
               font-size: 17px;
               font-weight: 400;
               }
        </style>
        </head>
        <body>
            <table>
		<tr>
		    <td>XSIBACKUP TEST E-MAIL:</td>
		</tr>
		<tr>
		    <td>E-mail sent on $(date)</td>
		</tr>
		<tr>
		    <td>From host $( getHostname )</td>
		</tr>				
	    </table>
	    <br />
        </body>
    </html>"
    echo "$checkHTML"	

}

getHostname(){
    HOSTNAME=$( echo "$(hostname -f 2>/dev/null)" | sed -e 's/^ *//g' -e 's/ *$//g' )
    if [ "$HOSTNAME" == "" ]
    then
    	HOSTNAME="localhost"
    fi
    echo "$HOSTNAME"    	
}

isWindows(){
    VMl="$( vim-cmd vmsvc/getallvms | grep -E "^${1}" | grep "win" )"
    if [ "$VMl" != "" ]
    then
    	if [ "$( echo "$VMl" | awk '{print $5}' | grep "64" | wc -l )" -gt "0" ]
    	then
    	    echo "64"	
    	else
    	    echo "32"
    	fi
    else
    	echo "0"
    fi
}

up2Pro(){
if [ "$APPNAM" == "XSIBACKUP-FREE" ] 
then
     RANDNUMBER="$( grep -m1 -ao '[0-9]' /dev/urandom | head -n1 )"
     u2ptxt2="Get XSIBACKUP-PRO at http://33hops.com"
     discTxt=""
     if [ "$RANDNUMBER" -eq "3" -o "$RANDNUMBER" -eq "7" -o "$RANDNUMBER" -eq "9" ]
     then
         NOTICE1=$( getNotice 1 )
         discTxt="USE DISCOUNT COUPON: $NOTICE1"
     fi     
     if [ "$2" == "HTM" ]
     then
        up2ProText="<table width=\"700\" border=\"0\" class=\"report\" align=\"center\"><tr><td>\n"
        up2ProText="${up2ProText}$1 is not available in <b>$APPNAM</b><br />\n"
        up2ProText="${up2ProText}${u2ptxt2}<br />\n"
        if [ "${#discTxt}" -gt "0" ]
        then
            NOTICE1=$( getNotice 1 )
            up2ProText="${up2ProText}USE DISCOUNT COUPON $NOTICE1<br />\n"
        fi
        up2ProText="${up2ProText}</td></tr></table>\n"
     
     else
        featxt="${1}"
        fetxln=${#featxt}
        if [ "$((fetxln%2))" -eq "0" ]
        then
            featxt=" ${1}"
        fi
        boxwidth=92
        topndbot="$(printf '%0.s-' $(seq 1 $boxwidth))"
        noticetxt1="${featxt} is not available in $APPNAM"
        noticetxt2="${u2ptxt2}"
        noticetxt3="$discTxt"
        NT1Len=${#noticetxt1}
	NT2Len=${#noticetxt2}
	NT3Len=${#noticetxt3}
	up2proline1="|$(printf '%0.s ' $( seq 1 $(( ($boxwidth/2-1)-($NT1Len/2) )) ))${noticetxt1}$(printf '%0.s ' $( seq 1 $(( ($boxwidth/2-1)-($NT1Len/2) )) ))|"
	up2proline2="|$(printf '%0.s ' $( seq 1 $(( ($boxwidth/2-1)-($NT2Len/2) )) ))${noticetxt2}$(printf '%0.s ' $( seq 1 $(( ($boxwidth/2-1)-($NT2Len/2) )) ))|"	
	up2proline3="|$(printf '%0.s ' $( seq 1 $(( ($boxwidth/2-1)-($NT3Len/2) )) ))${noticetxt3}$(printf '%0.s ' $( seq 1 $(( ($boxwidth/2-1)-($NT3Len/2) )) ))|"	
                  
        up2ProText="$topndbot\n"
     	up2ProText="${up2ProText}${up2proline1}\n"
     	up2ProText="${up2ProText}${up2proline2}\n"
     	
     	if [ "${#discTxt}" -gt "0" ]
     	then
     	    up2ProText="${up2ProText}${up2proline3}\n"
     	fi		
     	up2ProText="${up2ProText}$topndbot\n"
     fi
     echo -e "$up2ProText"	
fi
}

htmlFormat(){

    htmlformatted="$( echo "$1" | sed -r 's/(\\[0,1][0-9]{2}\[[0,1];[0-9]{2}m)//g' | sed -r 's/(\\[0-9]{3}\[[0,1]m)//g' | sed -r 's/(\\e\[[0-9]+m)//g' )"
    htmlformatted="$( echo "$htmlformatted" | sed 's/$/<br>/' )"
    echo "$htmlformatted"

}

rmremdir(){
    removingdirs=0
    if [ "$NAM" == "" ]
    then
        VMDESC="ALL VMs"
    else
    	VMDESC="$NAM"    
    fi
    if [ "$backsrvtrf" == "F" -a "$2" == "F" ]
    then
	removingdirs=2
	if [ "$SERVERTYPE" = "NET" ]
	then	
	    if [ "$backupprog" == "rsync" -o "$backupprog" == "onediff" -o "$backupprog" == "xsidiff" ]
	    then
	       	place=$baksrvaddr 
		# Delete remote folder
	        RM=$(eval ssh "$SSHOPTS" -p "$baksrvport" ${defremusr}@"$baksrvaddr" exec "rm -rf \"${1//\ /\\ }\" 2>&1")
	        RM="$( echo "$RM" | sed '/FIPS mode initialized/d' )"
	    fi
	else
	    RM="$( rm -rf "${1}" )"
	fi
    else		
    	if [ "$backupprog" == "vmkfstools" ]
    	then
    	    RM="$( rm -rf "\"${1}\"" )"	
    	fi
    	if [ "${2:0:1}" == "+" -o "${2:0:1}" == "-" ] && [ "${2:$(( ${#2}-1 )):1}" == "d" ]
    	then
    	    frpath="${1}"
    	    daystd="${2//d/}"
    	    if [ "${frpath:$(( ${#frpath}-1 )):1}" != "/" ]
    	    then
    	    	frpath="${frpath}/"
    	    fi	
    	    if [ "${2:0:1}" == "+" ]
    	    then
    	        timedirection="older"
    	    else
    	        timedirection="newer"
    	    fi
    	    if [ "$SERVERTYPE" = "NET" ]
    	    then
    	    	TD="$( eval ssh "$SSHOPTS" -p "$baksrvport" ${defremusr}@"$baksrvaddr" exec "find \"${frpath//\ /\\ }\" -name \"$datedirmask\" ! -name \"$newdirmask\"  -maxdepth 1 -type d -mtime ${daystd}" )"
    	    	TD="$( echo "$TD" | sed '/FIPS mode initialized/d' )"
    	    	if [ "$TD" != "" ]
    	    	then
    	    	    writeout "[$VMDESC] info: deleting root folders ${timedirection} than ${daystd//[+|-]/} days..."
    	    	    drawline	
    	    	    removingdirs=1
    	    	    writeout "$TD"
    	    	    drawline
    	    	    RM=$(eval ssh "$SSHOPTS" -p "$baksrvport" ${defremusr}@"$baksrvaddr" exec "find \"${frpath//\ /\\ }\" -name \"$datedirmask\" ! -name \"$newdirmask\" -maxdepth 1 -type d -mtime ${daystd} -exec rm -rf {} \\\\\; 2>&1")
                    RM="$( echo "$RM" | sed '/FIPS mode initialized/d' )"
                fi
            else
    	    	TD="$( find "${frpath//\ /\\ }" -name "$datedirmask" ! -name "$newdirmask" -maxdepth 1 -type d -mtime ${daystd} )"
    	    	if [ "$TD" != "" ]
    	    	then
    	    	    writeout "[$VMDESC] info: deleting root folders ${timedirection} than ${daystd//[+|-]/} days..."
    	    	    drawline
    	    	    removingdirs=1
    	    	    writeout "$TD"
    	    	    drawline
    	    	    RM="$( find "${frpath//\ /\\ }" -name "$datedirmask" ! -name "$newdirmask" -maxdepth 1 -type d -mtime ${daystd} -exec rm -rf {} \; )"	    
                fi
            fi
    	fi
    fi	

    if [ "$removingdirs" -gt "0" ]
    then
    	if [ "$RM" != "" ]
    	then
            writeout "\033[0;31m[$VMDESC] error RMREMDIR: could not delete remote dir/s at [${1}], details: $RM\033[0m"
            drawline
            ERR RMREMDIR "[$VMDESC] error: could not delete remote dir/s at [${1}], details: $RM"
    	else
            if [ "$removingdirs" -eq "1" ]
            then
            	if [ "$TD" != "" ]
            	then
            	    writeout "[$VMDESC] info: remote dir/s above at [${frpath}] were deleted"
	    	    drawline
	    	    DELDIRS="$( echo "$TD" | sed 's/$/<br>/' )"	            
            	    vmlistHTMLStr=$vmlistHTMLStr"
            	    <tr>\r\n
             	     <td colspan=\"8\" class=\"warn\"><b>--del-dirs</b> | deleted folders ${timedirection} than ${daystd//[+|-]/} days:<br />"${DELDIRS}"</td>\r\n
            	    </tr>\r\n"
            	fi            
            else	
            	writeout "[$VMDESC] info: the ${1} dir was removed as per the :F flag"	
            	drawline
            	if [ "$backupprog" == "onediff" -a "$backsrvtrf" == "F" ]
            	then
            	    writeout "[$VMDESC] notice: it might not make sense if using (c) OneDiff"
            	    drawline
            	fi
            fi	
    	fi
    else
    	if [ "$deldirs" != "" -a "$2" != "F" -a "$2" != "" ]
    	then
    	    writeout "[$VMDESC] info: no directories to delete as per the --del-dirs argument"
    	    drawline	
    	fi
    fi
}

isThinDisk(){
    if [ "$(( $(ls -las "$1" | awk '{print $1}') * 1024 ))" == "$(ls -las "$1" | awk '{print $6}')" ];
    then 
    	echo 0
    else
        echo 1
    fi	
}

getCPUInfo(){
    CPUInfo="$( vim-cmd hostsvc/hosthardware | grep description | awk -F ' = ' '{print $2}' | sed -r 's/\"|,//g' | sort -u )"
    echo "$CPUInfo"	
}

compHashes(){
	r1=${1// /\ }
	r2=${2// /\ }
	hash1=""
	hash2=""
	if [ "$3" != "" ]
	then
		if [ "$3" == "md5" ]
		then
			hashalg="md5"
			hashlen=32
		elif [ "$3" == "sha" ]
		then
			hashalg="sha"
			hashlen=40
		elif [ "$3" == "sha1" ]
		then
			hashalg="sha1"
			hashlen=40
		else
			hashalg="sha1"
			hashlen=40
		fi
	else
		hashalg="sha1"
		hashlen=40
	fi
	if [ -f "$r1" ]
	then
		nohup echo ${uniqidst}:$(openssl $hashalg "${r1}" 2>"${errfileb}" | awk -F '=' '{print $2}' | sed -e 's/^ *//g' -e 's/ *$//g') > "${r1}___hash" &
	else
		hash1=""
		echo "The file ${r1} does not exist"
		exit 1
	fi
	if [ -f "$r2" ]
	then
		hash2=$( openssl $hashalg "${r2}" 2>"${errfileb}" | awk -F '=' '{print $2}' | sed -e 's/^ *//g' -e 's/ *$//g' )
	else
		IFS=":"
		s=1
		for spart in $r2
		do
			eval "srv"$s=\""$spart"\"
			s=$(($s+1))
		done
		IFS=$OLDIFS
		REMEXISTS="$( eval ssh "$SSHOPTS" -p "$srv2" ${defremusr}@"$srv1" "ls -la \"${srv3// /\ }\" 2> /dev/null | wc -l" )"	            
		REMEXISTS="$( echo "$REMEXISTS" | sed '/FIPS mode initialized/d' )"
		if [ "$REMEXISTS" -eq "0" ]
		then
			hash2="null"
		else
			hash2=$( eval ssh "$SSHOPTS" -p "$srv2" ${defremusr}@"$srv1" "openssl "$hashalg" \"${srv3// /\ }\" 2>/dev/null" )
			hash2="$( echo "$hash2" | sed '/FIPS mode initialized/d' )"
			hash2=$( echo "$hash2" | awk -F '=' '{print $2}' | sed -e 's/^ *//g' -e 's/ *$//g' )
		fi
	fi
	while [ "$( cat "${r1}___hash" 2>/dev/null | grep "${uniqidst}" | wc -l )" -lt "1" ]
	do
		sleep 5
	done

	hash1="$( cat "${r1}___hash" | awk -F ':' '{print $2}' )"

	# Remove trivial messages from the ERR file
	sed -i '/openssl.cnf/d' "${errfileb}"
	
	if [ "${hashlen}" -gt "31" -a "$hash1" == "$hash2" -a "${#hash1}" -eq "${hashlen}" -a "${#hash2}" -eq "$hashlen" ]
	then
		echo "1"
	else
		echo "0"
	fi
}

is1Mmultiple(){
    if [ -f "$1" ]
    then
    	S=$( ls -las "$1" | awk '{print $6}' )
    	if [ "$( python -c "n=\"$S\";print(n.isdigit())" )" == "True" ]
    	then
    	    echo "$(( ${S}%1048576 ))"
    	else
    	    echo "-1"
    	fi    	
    else
    	echo "-2"
    fi	
}

checkAlign(){
                                            
    FO="$1"
    if [ "${FO//-flat.vmdk/}" != "${FO}" ]
    then
        oneMmultiple="$( is1Mmultiple "$FO" )"
        if [ "$oneMmultiple" -gt "0" ]
        then
            Sz=$( ls -las "$FO" | awk '{print $6}' )
            if [ "$( python -c "o=\"$Sz\";print(o.isdigit())" )" == "True" ]
            then
            	alignedsz="$(( $Sz/1048576+1 ))"	
            fi	
            writeout "\033[0;36m[$NAM] XSIT1MbM alert: disk [$FO] size ($Sz) is not multiple of 1M (1048576 bytes)\033[0m"
            writeout "\033[0;36m[-flat.vmdk] disks should be exact multiples of 1048576 byte blocks, which is the VMFS block size\033[0m"
            writeout "\033[0;36mSome operations like physical to virtual conversions can render disks which are not aligned to 1M\033[0m"
            writeout "\033[0;36m(c)XSITools requires -flat.vmdk disks to be aligned to 1M (1048576 bytes) chunks to work correctly\033[0m"
            writeout "\033[0;36mTurn off your VM and run: [ vmkfstools -X ${alignedsz}M ${FO//-flat.vmdk/.vmdk} ]\033[0m"
            writeout "\033[0;36mto align your disk to the closest 1M (1048576 bytes) multiple, or choose another multiple integer\033[0m"
            drawline
        elif [ "$oneMmultiple" -lt "0" ]
        then
            writeout "\033[0;31m[$NAM] XSIT1MbE error: function is1Mmultiple returned: $oneMmultiple\033[0m"
            drawline
        fi
    fi

}

disableVMotion(){
    state=$( vim-cmd hostsvc/vmotion/netconfig_get | grep selectedVnic | awk -F '=' '{print $2}' | awk -F ',' '{print $1}' | sed -e 's/^ *//g' -e 's/ *$//g' )
    if [ "$state" == "<unset>" -o "$state" == "" ]
    then
        writeout "VMotion is already disabled in this host"
    else
        VN="$( echo "$state" | sed -e 's/\"//g' -e 's/<//g' -e 's/>//g' | awk -F '-' '{print $NF}' )"
        DISABLEVM=$( vim-cmd hostsvc/vmotion/vnic_unset $VN )
        if [ "$DISABLEVM" == "" ]
        then
            VMOTIONVNIC="$VN"
            writeout "VMotion has been disabled for the $VN virtual NIC"
        else
            writeout "An error has ocurred when trying to disable $VN virtual NIC"
        fi
    fi
}

enableVMotion(){
    if [ "$VMOTIONVNIC" != "" ]
    then
        ENABLEVM=$( vim-cmd hostsvc/vmotion/vnic_set "$VMOTIONVNIC" )
        if [ "$ENABLEVM" == "" ]
        then
            writeout "VMotion has been re-enabled for the "$VMOTIONVNIC" virtual NIC"
        else
            writeout "Error: there's been a problem re-enabling VMotion for the "$VMOTIONVNIC" virtual NIC"
        fi
    else
        writeout "VMotion was already disabled in this host"
    fi
}

###############################################
#   BASE64 KSH NATIVE ENCODING FUNCTIONS      #
###############################################

        base64arr="A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z 0 1 2 3 4 5 6 7 8 9 + /"

        a=0
        IFS=" "
        for car in $base64arr
        do
            eval char$a=$car
        a=$(($a+1))
        done
        IFS=$OLDIFS

    dec_to_bin(){

        n=$1
        b=1
        while [ $n -ge 2 ]
        do
            binstr="$(($n % 2))"$binstr
        n=$(($n/2))
        b=$(($b+1))
        done
        echo $( printf "%0$(($(($b/8+1))*8))d" $(echo $n$binstr | sed 's/^0*//') )
    }

    bin_to_dec(){

        binnum=$1
        c=0
        while [ $c -lt ${#binnum} ]
        do
        p=$((${#binnum}-$c-1))
            decnum=$(($decnum+$(($((${binnum:$c:1}))*$((2**$p))))))
        c=$(($c+1))
        done
        echo $decnum
    }

    bin_to_b64(){

        binstr=$1
        u=0
        while [ $u -lt ${#binstr} ]
        do
            b64str=$b64str$( eval echo \$char$(bin_to_dec `echo ${binstr:$u:6} | sed -e :a -e 's/^.\{1,5\}$/&0/;ta'`) )
        u=$(($u+6))
        done
        echo $b64str
    }

    base64_encode(){

        rawstr=$@
        linewidth=64
        s=0
        while [ $s -lt ${#rawstr} ]
        do
            binout=$binout$( dec_to_bin `printf "%d\n" \'"${rawstr:$s:1}"` )
        s=$(($s+1))
        done
        b64out=$( bin_to_b64 $binout )
        app=0
        if [[ $(( ${#rawstr}%3 )) -ne 0 ]]
        then
            while [ $app -lt $(( 3-${#rawstr}%3 )) ]
            do
                b64out=$b64out"="
            app=$(($app+1))
            done
        fi
        echo $b64out
    }

###############################################
#   BASE64 KSH NATIVE ENCODING FUNCTIONS      #
###############################################

is_IPv4(){
    echo "$1" | grep -oE "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$" 2>/dev/null | head -n1 | wc -l
}

getNotice(){
    if [ "$1" == "" ]
    then
        echo "No information requested"
    else
        NOTICE=$( wget "http://a.33hops.com/getnotice.aspx?g=$1" -O - 2>/dev/null )
        echo "$NOTICE"
    fi
}

drawline(){
    lin=0
    while [[ $lin -lt $(( $TW-1 )) ]];
    do 
    	printf $separator'%.0s'
    	#printf "\e[90m$separator\033[0m"
    lin=$(( $lin+1 ))
    done
    echo ""
}

isEmail(){
    echo "$1" | grep -E -o "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b" | wc -l
}

isANumber(){
    if [ "$1" -eq "$1" ] 2>/dev/null;then echo 1;else echo 0;fi 
}

checksrv(){
    srvaddr=$( echo "$1" | awk -F ':' '{print $1}' )
    srvport=$( echo "$1" | awk -F ':' '{print $2}' )
    if [ "$( is_IPv4 "$srvaddr" )" -eq "0" ]
    then
    	echo -e "The server $srvaddr cannot be evaluated as an IPv4"
    	return 0
    fi
    if [ "$srvport" == "" ]
    then
    	echo -e "You need to provide an IP:port, port is empty"
        return 0
    fi
    if [ "$srvport" -ne "$srvport" ] 2>/dev/null
    then
    	echo -e "The port $srvport can't be evaluated as a number [1-65536]"
        return 0
    fi
    if [ "$srvport" -gt "65536" ]
    then
    	echo -e "The port $srvport is out of range"
    	return 0
    fi 
    scanresp="$( nc $srvaddr $srvport -w 1 2>/dev/null )"
    if [ "${scanresp/$2/}" != "$scanresp" ]
    then
        echo -n "1"
    else
        echo -n "0"
    fi
}

writeout(){
    txtout=""
    IFS=$newline
    for linout in $1
    do
        if [ "$txtout" == "" ]
        then
            eofl=""
        else
            eofl=$newline
        fi
        if [ -t 1 -a "$launched" == "user" ]
        then
            LP=""
        else
            LP="$( date +%Y-%m-%dT%H:%M:%S )|  "
            linout="$( echo "$linout" | sed -r 's/(\\[0,1][0-9]{2}\[[0,1];[0-9]{2}m)//g' | sed -r 's/(\\[0-9]{3}\[[0,1]m)//g' | sed -r 's/(\\e\[[0-9]+m)//g' | sed -r '/ [0-9]{1,2}%/d' )"
        fi
        txtout="$txtout"$eofl"$LP$linout"
    done
    IFS=$OLDIFS
    echo -e "$txtout"
}

xsib_shutdown(){
    rm -rf /tmp/.*.hashmap 2>/dev/null
    rm -rf /tmp/xsitools.tmp* 2>/dev/null
    if [ -f "$PWD"/xsibackup-pid ]
    then
        pids=$( cat "$PWD"/xsibackup-pid | sed -e ':a;N;$!ba;s/\n/;/g' )
        IFS=";"
        for lin in $pids
        do
            pid=$( echo "$lin" | awk '{ print $1 }' | sed -e 's/^ *//g' -e 's/ *$//g' )
            if [ "$pid" -eq "$$" -o "$( ps | grep "$$" | wc -l )" -eq "0" ]
            then
                sed -i "/$pid/d" "$PWD"/xsibackup-pid > /dev/null 2>&1
                if [ "$( ls -l "$PWD"/xsibackup-pid 2>&1 | awk '{print $5}' | sed -e 's/^ *//g' -e 's/ *$//g' )" == "0" ]
                then
                    rm -rf "${PWD}"/xsibackup-pid > /dev/null 2>&1
                fi
                KX=$( sleep 1 && kill -9 $pid > /dev/null 2>&1 && wait $pid > /dev/null 2>&1 ) && /bin/sh
            fi
        done
        IFS=$OLDIFS
    fi
    KX=$( kill -9 $$ > /dev/null 2>&1 )
}

pid_cleanup(){
        if [ -f "$PWD"/xsibackup-pid ]
        then
            pids=$( cat "$PWD"/xsibackup-pid )
            IFS=$newline
            for lin in $pids
            do
                if [ -f "$PWD"/xsibackup-pid ]
                then
                    pid=$( echo "$lin" | awk '{ print $1 }' | sed -e 's/^ *//g' -e 's/ *$//g' )
                    if [ "$pid" != "$$" -a "$( ps | grep "$$" | wc -l )" = "0" ]
                    then
                        sed -i "/$pid/d" "$PWD"/xsibackup-pid
                        if [ "$( ls -l "$PWD"/xsibackup-pid 2>&1 | awk '{print $5}' | sed -e 's/^ *//g' -e 's/ *$//g' )" = "0" ]
                        then
                            rm -rf "${PWD}"/xsibackup-pid > /dev/null 2>&1
                        fi
                    fi
                fi
            done
            IFS=$OLDIFS
        fi
}

setShellWarning(){
   
   param1="$1"
   if [ "$param1" == "" ]
   then
        echo "Error: 0 or 1 must be parsed as first argument to unset/set the shell warning"
   else
   	if [ "$param1" == "yes" ]
   	then
   	    setwarn="1"
   	elif [ "$param1" == "no" ]
   	then
   	    setwarn="0"	
   	fi
   fi
   if [ "$param1" == "1" ]
   then
        setwarn="0"
   else
        setwarn="1"
   fi
   supress=$( esxcli system settings advanced set -o /UserVars/SuppressShellWarning -i $setwarn | sed -e 's/^ *//g' -e 's/ *$//g' )
   if [ "$supress" == "" ]
   then
        if [ "$setwarn" == "1" ]
        then
            echo "Info: the shell warning has been disabled"
        else
            echo "Info: the shell warning has been enabled"
        fi
   else
       echo "Could not supress the shell warning"
   fi

}

link_to_host(){

    IFS=":"
    i=1
    hp="22"
    for sp in $1
    do
	if [ "$i" -eq 1 ]
	then
	    # If it's a hostname we find the IP
	    theIp=$( ping -c 1 -4 -W 1 "$sp" | head -n1 | awk -F "(" '{print $2}' | awk -F ")" '{print $1}' )
	    if [ $( echo "$theIp" | grep -oE "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$" | wc -l ) -eq 0 ]
	    then
		echo -e "\033[0;31m${sp} can't be evaluated as an IPv4 address\033[0m"
		drawline
		exit 0	
	    else
		hip="$sp"	
	    fi		
	fi
	if [ "$i" -eq 2 ]
	then
	    if [ $sp -gt 0 ] && [ $sp -lt 65536 ]
	    then
		hp=$sp	
	    else
		hp=22
	    fi
	fi
	i=$(( $i+1 ))	
    done
    IFS=$OLDIFS

    # Enable SSH out in the firewall
    echo -e "Enabling port $hp out in the ESXi firewall..."
    drawline
    if [ "$hp" -eq "25" ]
    then
    	fwDesc="SMTPout-"
    elif [ "$hp" -eq "26" ]
    then
    	fwDesc="SMTPout-"
    elif [ "$hp" -eq "587" ]
    then
        fwDesc="SMTPout-"
    elif [ "$hp" -eq "465" ]
    then
    	fwDesc="SMTPout-"
    elif [ "$hp" -eq "22" ]	
    then
    	fwDesc="SSHout-"
    else
    	fwDesc="Portout-"
    fi
    
    FWRESPONSE=$( openFirewall "$hp" "${fwDesc}$hp" "9998" "0001" "tcp" )

    if [ "$(checksrv $hip:$hp OpenSSH)" != "1" ]
    then
     	echo -e "\033[0;31mThe server at IP:Port $hip:$hp cannot be contacted\033[0m"
	drawline
     	xsib_shutdown
    fi

    if [ -f "$PWD"/xsibackup_id_rsa.pub ]
    then
        echo -e "\033[0;36mThere is already an RSA public key at "$PWD"/xsibackup_id_rsa.pub. We will use the existing one.\033[0m"
        drawline
	echo -e "\033[0;36mEnter the remote server root password when prompted.\033[0m"
        drawline
	ssh_key=$( cat "$PWD"/xsibackup_id_rsa.pub )
        
        writeout "Enter remote systems's password for user \e[1m${defremusr}\033[0m, checking OS type..."
        drawline
	OSTYPE="$( ( ssh -p$hp ${defremusr}@$hip "vmware -v 2>/dev/null | awk '{print \$1\" \"\$2}'" ) 2>&1 )"
	OSTYPE="$( echo "$OSTYPE" | sed '/FIPS mode initialized/d' )"
        if [ "$OSTYPE" == "VMware ESXi" ]
        then
            ssh_key_loc="/etc/ssh/keys-${defremusr}/authorized_keys"
            ssh_ini_rst="/etc/init.d/SSH restart"
            ssh_key2="$( ( ssh -p$hp ${defremusr}@$hip "cat $ssh_key_loc" ) 2>&1 )"
            ssh_key2="$( echo "$ssh_key2" | sed '/FIPS mode initialized/d' )"	
        else 
            writeout "Enter \e[1m${defremusr}\033[0m password again to look for its authorized_keys file..."
            drawline
	    ssh_key_loc=$( ( ssh -p$hp ${defremusr}@$hip "find \$(echo \$HOME) -name authorized_keys -maxdepth 4" ) 2>&1 )
            ssh_key_loc="$( echo "$ssh_key_loc" | sed '/FIPS mode initialized/d' )"
            ssh_ini_rst="/etc/init.d/sshd restart 2>/dev/null ; systemctl restart sshd 2>/dev/null"
            if [ "$ssh_key_loc" != "" ]
            then
           	writeout "Enter \e[1m${defremusr}\033[0m remote password to iterate existing keys..."
           	drawline
		ssh_key2=$( ( ssh -p$hp ${defremusr}@$hip "cat $ssh_key_loc" ) 2>&1 )
           	ssh_key2="$( echo "$ssh_key2" | sed '/FIPS mode initialized/d' )" 
            else
            	echo "Cannot find an authorized_keys file at $1"
		drawline            	
		echo "Tip: you might need to install additional OpenSSL components,"
            	echo "or just create the file for your OS, it usually requires 0600 permissions"
            	drawline
		xsib_shutdown
            fi	
        fi
                IFS=$newline
                for key in $ssh_key2
                do
                    if [[ "${key// /}" == "${ssh_key// /}" ]]
                    then
                        echo -e "\033[0;36mThe local RSA key has already been added to the authorized_keys file at $1.\033[0m"
                        echo -e "\033[0;36mThere is no need to add it again, you should be able to connect with XSIBackup to $1 without any password.\033[0m"
                        drawline 
			xsib_shutdown
                    fi
                done
                IFS=$OLDIFS
                
        writeout "Almost done, enter \e[1m${defremusr}\033[0m password to add RSA key and restart SSH service..."
	drawline        
	add_key="$( ( ssh -p$hp ${defremusr}@$hip "echo $ssh_key >> $ssh_key_loc && $ssh_ini_rst" ) 2>&1 )"
        add_key="$( echo "$add_key" | sed '/FIPS mode initialized/d' )"
        echo -e "\033[0;32mThe RSA key has been added to the authorized_keys file at $1.\033[0m"
        drawline
	echo -e "\033[0;32mRebooting local SSH service...\033[0m"
        eval "/etc/init.d/SSH restart"
        echo -e "\033[0;32mRebooting remote SSH service...\033[0m"
	drawline
        if [ "$2" != "dontQuit" ]
        then
            xsib_shutdown
	fi
    else
        echo -e "\033[0;36mNo RSA public key found, we will generate one...\033[0m"
        drawline
	rm -rf "$PWD"/id_rsa*
        /usr/lib/vmware/openssh/bin/ssh-keygen -t rsa -f "$PWD"/xsibackup_id_rsa -q -N ''
        echo -e "\033[0;32mThe RSA key has been generated.\033[0m"
        drawline
	ssh_key=$(cat "$PWD"/xsibackup_id_rsa.pub)
        echo -e "\033[0;32mEnter the remote server root password when prompted.\033[0m"
        drawline
	OSTYPE=$( ssh -p$hp ${defremusr}@$hip "vmware -v 2>/dev/null | awk '{print \$1\" \"\$2}'" )
	OSTYPE="$( echo "$OSTYPE" | sed '/FIPS mode initialized/d' )"        
        if [ "$OSTYPE" == "VMware ESXi" ]
        then
            ssh_key_loc="/etc/ssh/keys-${defremusr}/authorized_keys"
            ssh_ini_rst="/etc/init.d/SSH restart"
        else    	    
            ssh_key_loc=$( ( ssh -p$hp ${defremusr}@$hip "find / -name authorized_keys" ) 2>&1 )
            ssh_key_loc="$( echo "$ssh_key_loc" | sed '/FIPS mode initialized/d' )"
            ssh_ini_rst="/etc/init.d/sshd restart 2>/dev/null ; systemctl restart sshd 2>/dev/null"
        fi
        add_key="$( ( ssh -p$hp ${defremusr}@$hip "echo $ssh_key >> $ssh_key_loc" ) 2>&1 )"
        add_key="$( echo "$add_key" | sed '/FIPS mode initialized/d' )"
        echo -e "\033[0;32mThe RSA key has been added to the authorized_keys file at $1.\033[0m"
        drawline
	echo -e "\033[0;32mRebooting local SSH service...\033[0m"
        drawline
	/etc/init.d/SSH restart
        echo -e "\033[0;32mRebooting remote SSH service...\033[0m"
        drawline
	rst_srv="$( ( eval ssh -p$hp "$SSHOPTS" ${defremusr}@$hip "$ssh_ini_rst" ) 2>&1 )"
        rst_srv="$( echo "$rst_srv" | sed '/FIPS mode initialized/d' )"
    	if [ "$2" != "dontQuit" ]
    	then    
            xsib_shutdown
        fi
    fi
}

openFirewall(){

fwPort="$( echo "${1}" | sed -e 's/^ *//g' -e 's/ *$//g' )"
rlName="$( echo "${2}" | sed -e 's/^ *//g' -e 's/ *$//g' )"

srvcId="${3}"
ruleId="${4}"
tcpudp="${5}"

if [ "${fwPort}" == "" -o "${rlName}" == "" ]
then
    writeout "Can't open port in firewall, you must provide a port number and a rule name"
    if [ "${fwPort}" == "" ]
    then
	writeout "Service network port is empty, check your configuration"
    fi
    drawline	
else
    # We check if the firewall is loaded
    IFNOTLOADED=$( esxcli network firewall get | grep "Loaded: false" | wc -l )
    if [ "$IFNOTLOADED" -eq "1"  ]
    then
       	LOADFW=$( esxcli network firewall load )
    fi
    FWOUT=$( esxcli network firewall ruleset list | grep "$2" )
    if [ "$FWOUT" == "" ]
    then
      	chmod 644 /etc/vmware/firewall/service.xml
chmod +t /etc/vmware/firewall/service.xml
FWRULE=" \
 <service id='"${srvcId}"'>\n \
    <id>"${rlName}"</id>\n \
    <rule id='"${ruleId}"'>\n \
    	<direction>outbound</direction>\n \
    	<protocol>"${tcpudp}"</protocol>\n \
    	<porttype>dst</porttype>\n \
    	<port>"${fwPort}"</port>\n \
    </rule>\n \
    <enabled>true</enabled>\n \
    <required>false</required>\n \
 </service>\n \
</ConfigRoot>"
        sed -i "s:<\/ConfigRoot>:${FWRULE}:g" "/etc/vmware/firewall/service.xml"
        chmod 444 /etc/vmware/firewall/service.xml
        esxcli network firewall refresh
        echo "Firewall rule ${rlName} added..."
    else
        # If the firewall service ${rlName} exists we make sure it is open
        esxcli network firewall ruleset set --ruleset-id="${rlName}" --enabled=true
        writeout "Opening port ${fwPort} for ${rlName} service..."
    fi
fi
}

#trap "echo \"\";echo -e \"\033[0;32mShutting down...\033[0m\" && xsib_shutdown " SIGINT SIGTERM
