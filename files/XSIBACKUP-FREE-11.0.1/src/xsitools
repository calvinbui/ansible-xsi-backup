getSha1Zero(){
    if [ "$1" == "10485760" ]
    then
    	echo "8c206a1a87599f532ce68675536f0b1546900d7a"
    elif [ "$1" == "20971520" ]
    then
    	echo "9674344c90c2f0646f0b78026e127c9b86e3ad77"
    elif [ "$1" == "52428800" ]
    then
    	echo "49886561f8e26ed5e2ae549897a28aaab44881bd"
    fi
}

xsiTools(){

DDBIN="dd"
#DDBIN="$PWD/bin/dd"
OSBIN="openssl"
#LZBIN="$PWD/bin/lzop"
LZBIN="lzop"

if [ "$4" != "" ]
then
    if [ "$( echo "$4" | awk '{print tolower($0)}' )" == "auto" ]
    then
    	if [ "$1" == "check" ]
    	then
    	    echo "The blocksize set for the repository will be used to check it"	
    	else
    	    BLOCKSIZE=52428800
    	fi
    else
	BADB=0
	if [ "${#4}" -ne "3" ]
	then
	    BADB=1	
	fi
	if [ "${4:2:1}" != "M" ]
	then
	    BADB=1
	fi
	BS="${4//M/}"
	if [ "$BS" -ne "10" -a "$BS" -ne "20" -a "$BS" -ne "50" ]
	then
	    BADB=1
	fi
	if [ "$BADB" == "1" ]
	then
	    writeout "$4 is not an allowed block size, allowed ( 10M, 20M, 50M[default] ). Default (50M) will be applied."
    	    BLOCKSIZE=52428800
    	else
    	    BLOCKSIZE=$(( $BS*1024*1024 ))		
    	fi    
    fi	
else
    BLOCKSIZE=52428800
fi

SHA1ZERO=$( getSha1Zero "$BLOCKSIZE" )

if [ "$1" == "backup" ]
then
    writeout "Blocksize is $BLOCKSIZE bytes"
    drawline
fi

if [ "$1" == "check" ]
then
    repopath="$2"
    if [ -d "$repopath"/data -a -f "$repopath"/.xsitools -a "$( cat "$repopath"/.xsitools 2>/dev/null | grep "XSITools Repo" | wc -l )" -eq "1" ]
    then
        writeout "<$repopath> is an (c)XSITools repo"
        drawline
        repotype="fullrepo"
    elif [ "$( ls -1 "$repopath"/*.vmdk.info | wc -l )" -gt "0" ]
    then
    	writeout "<$repopath> is an (c)XSITools repo VM directory"
    	drawline
    	repotype="repovdir"
    else
    	writeout "<$repopath> is not an (c)XSITools repository"
    	drawline
    	writeout "<$repopath> is not an (c)XSITools VM folder either"
    	drawline
    	exit 33
    fi 

    STARTCHECK=$(date +%s)	
   
    echo "Checking XSITools Repo: "
    drawline 
    if [ "$repotype" == "fullrepo" ]
    then
    	blockn=$( find "$repopath"/data -type f -maxdepth 4 -regex '.*/[a-f0-9]*' | wc -l )
    	brecrd=$( cat "$repopath"/.xsitools | grep Bcnt | awk -F ': ' '{print $2}' )
    	blsize=$( cat "$repopath"/.xsitools | grep Bsiz | awk -F ': ' '{print $2}' )
    	blcomp=$( cat "$repopath"/.xsitools | grep Comp | awk -F ': ' '{print $2}' )
	if [ "$blockn" -ne "$brecrd" ]
	then
	    writeout "\033[1;31mBlock count mistmatch: $blockn physical, $brecrd registered file\033[0m"
	    CHKERRS="Block count mistmatch: $blockn count, $brecrd at .xsitools file"
	    CHKRSLT="KO"
	    if [ "$blockn" -gt "$brecrd" ]
	    then
	    	writeout "Do not panic, the number of blocks on disk is greater than the registered amount"
	    	writeout "This can be due to a previous backup having been interrupted"
	    	writeout "You can check your VMs individually to make sure they are complete"
	    	CHKERRS="$CHKERRS${newline}Do not panic, the number of blocks on disk is greater than the registered amount.${newline}This can be due to a previous backup having been interrupted"
	    else
	    	writeout "\033[1;31mNumber of registered blocks is greater than physical blocks in the repo\033[0m"
	    	writeout "\033[1;31mThis means that some blocks have been deleted, wait for more detailed messages\033[0m"
	    	CHKERRS="$CHKERRS${newline}Number of registered blocks is greater than physical blocks in the repo.${newline}This means that some blocks have been deleted, wait for more detailed messages"
	    fi
	else
	    echo -e "Physical count $blockn equals $brecrd registered blocks at .xsitools file"
	fi
	crp=1
	failedblockchecks=0
	badblocksdetected=""
	IFS=$newline
	theblocks=$(find "$repopath"/data -type f -maxdepth 4 -regex '.*/[a-f0-9]*' -exec printf '%s\n' {} \;)
	for ifile in $theblocks
	do
	    if [ "$blcomp" -eq "1" ]
	    then
	        COND1=$( "$LZBIN" -d -c "${ifile}" | "$OSBIN" sha1 2>/dev/null | awk -F '= ' '{print $2}' )
	    else
	        COND1=$( "$OSBIN" sha1 "${ifile}" 2>/dev/null | awk -F '= ' '{print $2}' )
	    fi
	    COND2=$( basename ${ifile} )
	    if [ "$COND1" != "$COND2" ]
	    then
	        failedblockchecks=$(( $failedblockchecks+1 ))
	        badblocksdetected=${badblocksdetected}${newline}$COND2
	        echo "Bad block detected: $COND2"
	        if [ "$delbadblocks" == "yes" ]
	        then
	            mv "${ifile}" "${ifile}.rem" && CHKERRS="$CHKERRS${newline}Bad block ${ifile} deleted"
	        fi
	    fi
	    echo -ne "${crp}/${blockn} blocks | Processed $(( $crp*100/$blockn ))%\033[0K\r"
	crp=$(( $crp+1 ))
	done
	IFS=$OLDIFS
	printf '%s\n'

    elif [ "$repotype" == "repovdir" ]
    then
        restorefiles=$( ls -1 "$repopath"/*-flat.vmdk )
        writeout "XSIBackup will only check the VM folder: $repopath"
        writeout "This are the deduplicated data files to check:"
        drawline
        writeout "\033[1;32m$restorefiles\033[0m"
       	drawline
       	blockn=0
        theblocks=""
        IFS=$newline
        for restorefile in $restorefiles
        do
      	    bn=$( cat "$restorefile" | wc -l )
      	    tb=$( cat "$restorefile" | sort -u )
      	    blockn=$(( $blockn+$bn ))
      	    theblocks=${theblocks}${tb}${newline}	  
        done
        IFS=$OLDIFS

	theblocks=$( echo "$theblocks" | sed '/^$/d' | sort -u )
	blockn=$( echo "$theblocks" | wc -l )

        blsize=$( cat "$repopath"/../../.xsitools | grep Bsiz | awk -F ': ' '{print $2}' )
        blcomp=$( cat "$repopath"/../../.xsitools | grep Comp | awk -F ': ' '{print $2}' )    
	failedblockchecks=0
	crp=1
	IFS=$newline
	
	for line in $theblocks
	do
	    if [ "$line" != "$SHA1ZERO" ]
	    then
	   	blockpath="$repopath"/../../data/${line:0:1}/${line:1:1}/${line:2:1}/$line	
            	if [ -f "$blockpath" ]
            	then
            	    if [ "$blcomp" -eq "1" ]
            	    then
                        COND1=$( "$LZBIN" -d -c "${blockpath}" | "$OSBIN" sha1 2>/dev/null | awk -F '= ' '{print $2}' )
            	    else
                        COND1=$( "$OSBIN" sha1 "${blockpath}" 2>/dev/null | awk -F '= ' '{print $2}' )
            	    fi
            	    COND2=$line
            	    if [ "$COND1" != "$COND2" ]
            	    then
                        failedblockchecks=$(( $failedblockchecks+1 ))
                        badblocksdetected=${badblocksdetected}${newline}$COND2
                        echo "Bad block detected: $COND2"
                        if [ "$delbadblocks" == "yes" ]
                        then
                       	    mv "${blockpath}" "${blockpath}.rem" && CHKERRS="$CHKERRS${newline}Bad block ${blockpath} deleted"
            		fi
            	    fi
            	else
            	    failedblockchecks=$(( $failedblockchecks+1 ))
            	    badblocksdetected=${badblocksdetected}${newline}$line
		    CHKERRS="$CHKERRS${newline}Block $line is missing"
		    CHKRSLT="KO"            			
            	fi
	        echo -ne "${crp}/${blockn} blocks | Processed $(( $crp*100/$blockn ))%\033[0K\r"
	    fi
	crp=$(( $crp + 1 ))
	done
	IFS=$OLDIFS
	printf '%s\n'
    else
	writeout "The path $repopath is not an XSITools repo nor a XSITools VM directory"
	exit 33    
    fi
    
    ENDCHECK=$(date +%s)
    CHECKTIME=$(( $ENDCHECK - $STARTCHECK ))

    if [ "$failedblockchecks" -eq "0" ]
    then
        CHKERRS="$CHKERRS${newline}No errors detected"
        CHKRSLT="OK"
    else
        CHKERRS="$CHKERRS${newline}$failedblockchecks bad blocks detected${newline}${badblocksdetected}"
        CHKRSLT="KO"
    fi
    CHKERRS=$( echo "$CHKERRS" | sort -u )
    writeout "$CHKERRS"	
    drawline

    CHKRESUHTML="<b>"$APPNAM" "$APPVER" | "$APPCOM"</b><br>Checking XSITools repository "$repopath"<br>Time taken: "$CHECKTIME" seconds<br>"
    IFS=${newline}
    for chkline in $CHKERRS
    do
    	CHKRESUHTML="$CHKRESUHTML$chkline<br />"
    done	
    IFS=$OLDIFS
   
    CHECKRESULT="$CHKRSLT"

    checkRepoHTML="
            XSIBACKUP XSITOOLS REPO CHECK:<br />
            "$CHKRESUHTML
            
    echo "$checkRepoHTML<hr />" >> /tmp/checkRepoHTML.tmp
            
    
    if [ "$( isEmail ${3} )" == "1" ]
    then
    	checkRepoHTML="<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>
    	<html>
            <head>
            <title>XSIBACKUP "$APPVER" TEST E-MAIL</title>
            <style type="text/css">
           	body {
               	font-family: arial;
               	font-size: 17px;
               	font-weight: 400;
               	}
            </style>
            </head>
            <body>
            	"$checkRepoHTML"
            </body>
    	</html>"
    	
    	sendMail "$3" "XSIBACKUP XSITOOLS REPOSITORY CHECK | $CHKRSLT" "$checkRepoHTML" 1
    fi

elif [ "$1" == "backup" ]
then
        if [ ! -f "$2" ]
        then
            writeout "File $2 does not exist"
	    exit 33
	else	
	    FILEPATH="$2"
            FILENAME=$( basename "$2" )
            FILESIZE=$( ls -las "$FILEPATH" | awk '{print $6}' )
            DISKUSAG=$( du "$FILEPATH" | awk '{print $1}' )
            DISKUSAG=$( python -c "print($DISKUSAG*1024)" )
            BLOCKCNT1=$( python -c "print(int($FILESIZE/$BLOCKSIZE))" )
            BLOCKCNT2=$( python -c "print($FILESIZE/float($BLOCKSIZE))" )
            COMPBOOLE=$( python -c "print($BLOCKCNT1 == $BLOCKCNT2)" )
            COMPBOOLE=$( echo "$COMPBOOLE" | awk '{print tolower($0)}' )
            if [ "$COMPBOOLE" == "true" ]
            then
            	BLOCKCNT=$BLOCKCNT1
            else
            	BLOCKCNT=$(( $BLOCKCNT1+1 ))
            fi
        fi

	RTTARGET=$( dirname $( dirname "$3" ) )
	DTTARGET="$RTTARGET"/data
	HASHTABLE="$3"/"$FILENAME"
	INFOFILEP="$HASHTABLE.info"

	if [ ! -d "$RTTARGET" ]
	then
	    mkdir -p "$RTTARGET"
	fi

	if [ "${5//z/}" != "${5}" ]
	then
	    compression=1
	    writeout "Compression has been set"	
	else
	    compression=0
	fi

        if [ ! -d "$DTTARGET" ]
        then
            mkdir -p "$DTTARGET"
            echo "Desc: XSITools Repo v 1.0.0" > "$RTTARGET"/.xsitools
            echo "Bsiz: $BLOCKSIZE" >> "$RTTARGET"/.xsitools
            echo "Bcnt: 0" >> "$RTTARGET"/.xsitools
            echo "Comp: $compression" >> "$RTTARGET"/.xsitools
        fi

        if [ ! -d "$3" ]
        then
            mkdir -p "$3"
        fi

	REPOBSIZE=$( cat "$RTTARGET"/.xsitools | grep Bsiz | awk -F ': ' '{print $2}' )
	if [ "$REPOBSIZE" -ne "$BLOCKSIZE" ]
	then
	    writeout "XSITools Error: you cannot backup to this repository with a blocksize of $BLOCKSIZE"
	    writeout "The block size has been set to $REPOBSIZE upon repository creation"	    	
	    exit 33
	fi

        REPOCOMP=$( cat "$RTTARGET"/.xsitools | grep Comp | awk -F ': ' '{print $2}' )

        if [ "$REPOCOMP" -ne "$compression" ]
        then
	    if [ "$compression" == "0" ]
	    then
		writeout "XSITools Error: this is a compressed repository, you must enable compression to backup to it"
	    else
		writeout "XSITools Error: this is an uncompressed repository, you cannot backup to it with compression enabled"
	    fi		    
            exit 33
        fi

        echo -n "" > "$HASHTABLE" && touch "$HASHTABLE"
        echo -n "" > "$INFOFILEP" && touch "$INFOFILEP"

	writeout "Backing up via XSITools"
	drawline
	writeout "File name: $FILENAME, File size: $FILESIZE"
	writeout "Block size: $BLOCKSIZE, Block count: $BLOCKCNT"
	writeout "Disk usage: $DISKUSAG"
	drawline

	SUBBLKSIZ=1048576
	SUBBLKCNT=$(( $BLOCKSIZE/$SUBBLKSIZ ))

	echo "fsize: $FILESIZE" > "$INFOFILEP"
	echo "usage: $DISKUSAG" >> "$INFOFILEP"
	echo "bsize: $BLOCKSIZE" >> "$INFOFILEP"
	echo "bcomp: $compression" >> "$INFOFILEP"

	xrtr=0
	retrybb=""	
	START=$(date +%s)
	icnt=1
	ZCNT=0
	NCNT=0
	until [ $icnt -eq $(( ${BLOCKCNT}+1 )) ]
	do
	    #NOW=$(date +%s)
	    #LPS=$(( $NOW - $START ))
	    #POS=$( python -c "print($icnt*$BLOCKSIZE)" )
	    #SPD=$( python -c "print($POS/1048576/($LPS+1))" )
	    #echo -ne "Processed $(( $icnt*100/$BLOCKCNT ))% | $SPD Mb/s\033[0K\r"	
	    echo -ne "$(( $icnt ))/$BLOCKCNT blocks | Processed $(( $(( $icnt+1 ))*100/$BLOCKCNT ))%\033[0K\r"	
	    REGSUBBLKCNT=$SUBBLKCNT
	    FULSUBBLKCNT=$SUBBLKCNT
	    INXS="0"
	    if [ "$icnt" -eq "$(( $BLOCKCNT ))" ]
	    then
	    	INXS=$( python -c "print ('0') if ($FILESIZE/float($SUBBLKSIZ))==(int($FILESIZE/$SUBBLKSIZ)) else ('1')" )
	    	FULSUBBLKCNT=$(( ${FILESIZE}%${BLOCKSIZE}/${SUBBLKSIZ} ))
	    	SUBBLKCNT=$(( ${FILESIZE}%${BLOCKSIZE}/${SUBBLKSIZ}+${INXS} ))
	        LASTBLOCKSIZE=$SUBBLKCNT
	    fi
	    HASH=$( ( "$DDBIN" if="$FILEPATH" bs=$SUBBLKSIZ count=$SUBBLKCNT skip=$(( $(( ${icnt}-1 ))*${REGSUBBLKCNT} )) 2>/dev/null | "$OSBIN" sha1 2>/dev/null | grep "(stdin)=" | awk -F '=' '{print $2}' | sed -e 's/^ *//g' -e 's/ *$//g' ) 2>&1 )
	    if [ "${#HASH}" -ne "40" ]
	    then
	    	ERR XSITBPHS "Cannot process block $icnt, error getting hash, will retry. Warning: $HASH" W
	        writeout "\033[1;31mCannot process block $icnt, error getting hash, will retry. Warning: $HASH\033[0m"
	        writeout "Retrying..."
	        icnt=$(( $icnt-1 ))
	        sleep 1
	    else
		echo "$HASH" >> "$HASHTABLE" 
		if [ "$HASH" != "$SHA1ZERO" -o "$ZCNT" -eq "0" ]
		then
			FstL=${HASH:0:1}
			SndL=${HASH:1:1}
			TrdL=${HASH:2:1}
			HASHDIR="$DTTARGET"/"$FstL"/"$SndL"/"$TrdL"
			EXISTS=$( ls "$HASHDIR"/"$HASH" 2>/dev/null | wc -l )
			if [ $EXISTS -eq 0 ]
			then			
			    if [ ! -d "$HASHDIR" ]
			    then
			    	mkdir -p "$HASHDIR"
			    fi
			    if [ "$compression" == "0" ]
			    then
			    	DDOUT=$( "$DDBIN" if="$FILEPATH" bs=$SUBBLKSIZ count=$SUBBLKCNT skip=$(( $(( ${icnt}-1 ))*${REGSUBBLKCNT} )) of="$HASHDIR/$HASH" 2>&1 )
			    else
			    	DDOUT=$( ( "$DDBIN" if="$FILEPATH" bs=$SUBBLKSIZ count=$SUBBLKCNT skip=$(( $(( ${icnt}-1 ))*${REGSUBBLKCNT} )) | "$LZBIN" -1 -c | cat > "$HASHDIR/$HASH" ) 2>&1 )
			    fi
			    if [ "${DDOUT:0:32}" != "${FULSUBBLKCNT}+${INXS} records in${newline}${FULSUBBLKCNT}+${INXS} records out" -a "${DDOUT:0:30}" != "${FULSUBBLKCNT}+${INXS} records in${newline}${FULSUBBLKCNT}+${INXS} records out" ]
			    then
			        if [ "$xrtr" -lt "10" ]
			        then
			            ERR XSITBPWC "Cannot process block $HASH ($icnt), this is just a warning, will try again. Warning: ${DDOUT:0:32}" W
			            writeout "\033[1;31mCannot process block $HASH ($icnt), error: ${DDOUT:0:32}\033[0m"
			            xrtr=$(( $xrtr+1 ))
			            writeout "Retrying block $icnt for the $xrtr time"
			            icnt=$(( $icnt-1 ))
			            rm -f "$HASHDIR/$HASH" 2>/dev/null
			            sed -i '$ d' "$HASHTABLE"
			            sleep 1
			        else
			            retrybb=${retrybb};"$(( $icnt-1 ))"
			            echo "$(( $icnt-1 ))|0000000000000000000000000000000000000000" >> "$HASHTABLE"
			        fi
			    else
			        NCNT=$(( $NCNT+1 ))
			    fi
			fi
		fi
		if [ "$ZCNT" -eq "0" -a "$HASH" == "$SHA1ZERO" ]
		then
		    ZCNT=1
		fi
		if [ "$?" -ne "0" ]
		then
		    exit 33
		fi
            fi
	icnt=$(( $icnt+1 ))
	done
	# Just for testing purposes >>>
	if [ -f "$PWD"/retry.txt ]
	then
	    retrybb="$( cat "$PWD"/retry.txt )"
	fi
	# Just for testing purposes <<<
	REGSUBBLKCNT=$SUBBLKCNT
	SUBBLKCNT=$(( $BLOCKSIZE/$SUBBLKSIZ ))
	if [ "$retrybb" != "" ]
	then
	    sync
	    sleep 2
	    writeout "Last resort retry for blocks: $retrybb"
	    ERR XSITLRRB "Last resort retry for blocks: $retrybb" W
	    drawline
	    IFS=";"
	    for rbb in $retrybb
	    do	
	        if [ "$(( $rbb+1 ))" -eq "$BLOCKCNT" ]
	        then
		    echo "You won the lottery!, your last block has been set for retry"
		    SUBBLKCNT=$LASTBLOCKSIZE	    		       	    	 
	        fi
	        HASH=$( "$DDBIN" if="$FILEPATH" bs=$SUBBLKSIZ count=$SUBBLKCNT skip=$(( ${rbb}*${REGSUBBLKCNT} )) conv=notrunc,sync 2>/dev/null | "$OSBIN" sha1 2>/dev/null | grep "(stdin)=" | awk -F '=' '{print $2}' | sed -e 's/^ *//g' -e 's/ *$//g' )
		if [ "${#HASH}" -ne "40" ]
		then
		    ERR XSITHBAD "Bad irrecoverable block at position $rbb. Error: $HASH: $HASH"
		    writeout "\033[1;31mBad irrecoverable block at position $rbb. Error: $HASH\033[0m"
		else                                                                                            
		    FstL=${HASH:0:1}
		    SndL=${HASH:1:1}
		    TrdL=${HASH:2:1}
		    HASHDIR="$DTTARGET"/"$FstL"/"$SndL"/"$TrdL"
                    if [ ! -d "$HASHDIR" ]
                    then
                    	mkdir -p "$HASHDIR"
                    fi
		    if [ "$compression" == "0" ]
		    then
		        DDOUT=$( "$DDBIN" if="$FILEPATH" bs=$SUBBLKSIZ count=$SUBBLKCNT conv=notrunc,sync skip=$(( ${rbb}*${REGSUBBLKCNT} )) of="$HASHDIR/$HASH" 2>&1 )
		    else
			DDOUT=$( ( "$DDBIN" if="$FILEPATH" bs=$SUBBLKSIZ count=$SUBBLKCNT conv=notrunc,sync skip=$(( ${rbb}*${REGSUBBLKCNT} )) | "$LZBIN" -1 -c | cat > "$HASHDIR/$HASH" ) 2>&1 )
		    fi
		    if [ "${DDOUT:0:32}" != "${SUBBLKCNT}+0 records in${newline}${SUBBLKCNT}+0 records out" -a "${DDOUT:0:30}" != "${SUBBLKCNT}+0 records in${newline}${SUBBLKCNT}+0 records out" ]
		    then
			ERR XSITLRRB "I give up!, I can't backup $BLOCKSIZE block at pos $rbb in file $FILEPATH. Fatal error: $DDOUT"
		    else
		        writeout "\033[1;34mRecovered block $rbb with hash: $HASH\033[0m"
		        sed -i "s/$rbb|0000000000000000000000000000000000000000/$HASH/" "$HASHTABLE" 	
		    fi	    
		fi
	    done
	    IFS=$OLDIFS
	    drawline
	else
	    echo ""
	fi
	# Clear line
	#echo -e "\033[3J"	
	OLDBCNT=$( cat "$RTTARGET"/.xsitools | grep "Bcnt:" | awk -F ': ' '{print $2}' )
	NEWBCNT=$(( $OLDBCNT+$NCNT ))
	echo -e "Previous block count: $OLDBCNT"
	echo "Current block count: $NEWBCNT"
	drawline
	
	if [ "$OLDBCNT" -ne "$NEWBCNT" ]
	then
	    sed -i "/Bcnt/c\Bcnt: $NEWBCNT" "$RTTARGET"/.xsitools
	fi
	END=$(date +%s)
	TIMEDIFF=$(( $END - $START + 1 ))
        #echo "BLOCKCNT: $BLOCKCNT"
        echo "Time taken: $TIMEDIFF seconds"
        SPEED=$( python -c "print(int($FILESIZE/1048576/$TIMEDIFF))" )
        echo "Avg speed: $SPEED mb/s"

elif [ "$1" == "copy" ]
then
	if [ ! -f "$2" ]
        then
            echo "File $2 does not exist"
            exit 33
        else
            FILEPATH="$2"
            FILENAME=$( basename "$2" )
            FILESIZE=$( ls -las "$FILEPATH" | awk '{print $6}' )
            DISKUSAG=$( du "$FILEPATH" | awk '{print $1}' )
            DISKUSAG=$( python -c "print(int($DISKUSAG*1024))" )
            BLKSUSED=$( python -c "print(int($DISKUSAG/$BLOCKSIZE))" )
            PERCTFILL=$( python -c "print(int($DISKUSAG*100/$FILESIZE))" )

            BLOCKCNT1=$( python -c "print(int($FILESIZE/$BLOCKSIZE))" )
            BLOCKCNT2=$( python -c "print($FILESIZE/float($BLOCKSIZE))" )
            COMPBOOLE=$( python -c "print($BLOCKCNT1 == $BLOCKCNT2)" )
            COMPBOOLE=$( echo "$COMPBOOLE" | awk '{print tolower($0)}' )
            if [ "$COMPBOOLE" == "true" ]
            then
                BLOCKCNT=$BLOCKCNT1
            else
                BLOCKCNT=$(( $BLOCKCNT1+1 ))
            fi
        fi

	network_copy=0
	local_hmap_exists=0
	if [ "$( echo "$3" | grep -oE "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[:][0-9]{1,5}:/.*/.*" | wc -l )" -eq "1" ]
	then
	    network_copy=1
	    local_hmap_path="/tmp/${FILENAME}.hmap"
	    xcNETIPv4=$( echo "$3" | awk -F ':' '{print $1}' )
	    xcNETPort=$( echo "$3" | awk -F ':' '{print $2}' )
	    xcNETPath=$( echo "$3" | awk -F ':' '{print $3}' )
	    REMOTEHMAPEXISTS=$( eval ssh "$SSHOPTS" -p$xcNETPort ${defremusr}@$xcNETIPv4 "[ -f \"$xcNETPath/${FILENAME}.hmap\" ] && echo 1 || echo 0" )
	    [ -f "${local_hmap_path}" ] && rm -rf "${local_hmap_path}" || echo "No "${local_hmap_path}" found"
	    if [ "$REMOTEHMAPEXISTS" -eq "1" ]
	    then
	    	ssh "$SSHOPTS" -p$xcNETPort ${defremusr}@$xcNETIPv4 "cat \"$xcNETPath/${FILENAME}.hmap\" && rm -rf \"$xcNETPath/${FILENAME}.hmap\"" | cat > "${local_hmap_path}"
	    	ssh "$SSHOPTS" -p$xcNETPort ${defremusr}@$xcNETIPv4 "rm -rf \"$xcNETPath/${FILENAME}.hmap\" && echo \"$xcNETPath/${FILENAME}.hmap deleted\" || echo \"Could not delete xcNETPath/${FILENAME}.hmap\""	
	    	if [ -f "${local_hmap_path}" ]
	    	then
	    	    local_hmap_exists=1
		    LOCALMAPTABLE=$( cat "${local_hmap_path}" )
	    	    COUNTHMAP=$( echo "$LOCALMAPTABLE" | wc -l )
	    	    if [ "$COUNTHMAP" -ne "$BLOCKCNT" ]
	    	    then
	    	    	echo "The number of mapped blocks at ${local_hmap_path} does not match current block number: $BLOCKCNT..., reinitializing copy"
	    	    	rm -rf "${local_hmap_path}"
	    	    	local_hmap_exists=0
			LOCALMAPTABLE=""	
	    	    else
	    	    	echo "$COUNTHMAP blocks in ${local_hmap_path} | OK"
	    	    fi
	    	fi
	    fi	
	fi
        echo "Copying with XSITools..."
        drawline
        echo "File name: $FILENAME, File size: $FILESIZE"
        echo "Block size: $BLOCKSIZE, Block count: $BLOCKCNT"
        echo "Disk usage: $DISKUSAG, Blocks used: $BLKSUSED, Filled: ${PERCTFILL}%"
        if [ ! -d "$3" ]
        then
            mkdir -p "$3"
        fi
	TARGETFILE="$3"/"$FILENAME"
        if [ "$network_copy" -eq "0" ]
        then
            # 1M block count
            COUNT=$( python -c "print(int($FILESIZE/1048576))" )
            echo "Creating file..."
            "$DDBIN" of="$TARGETFILE" bs=1048576 seek=$COUNT count=0
	fi
        START=$(date +%s)
        icpy=0
        until [ $icpy -eq $(( $BLOCKCNT )) ]
        do
	    "$PWD"/xsidiff --source="$FILEPATH" --target=stdout --skip-blocks=$icpy --block-number=1 --block-size=$BLOCKSIZE --raw-data > /tmp/B
	    HASH=$( cat /tmp/B | "$OSBIN" sha1 2>/dev/null | grep "(stdin)=" | awk -F '=' '{print $2}' | sed -e 's/^ *//g' -e 's/ *$//g' )
	    #HASH=$( "$DDBIN" if="$FILEPATH" bs=$BLOCKSIZE count=1 skip=$icpy 2>/dev/null | "$OSBIN" sha1 2>/dev/null | grep "(stdin)=" | awk -F '=' '{print $2}' | sed -e 's/^ *//g' -e 's/ *$//g' )
	    STORED_HASH=""
	    if [ "$local_hmap_exists" -eq "1" ]
	    then
	    	STORED_HASH=$( sed "$(( $icpy+1 ))q;d" "${local_hmap_path}" | sed -e 's/^ *//g' -e 's/ *$//g' )
            fi
	    echo -ne "$(( $icpy+1 ))/$BLOCKCNT | Processed $(( $(( $icpy+1 ))*100/$BLOCKCNT ))%\033[0K\r"
	    if [ "$network_copy" -eq "0" ]
	    then
	    	if [ "$icpy" -gt "$BLKSUSED" ]
	    	then 
	    	    if [ "$HASH" != "$SHA1ZERO" ]
	    	    then			    
            	    	"$DDBIN" if="$FILEPATH" of="$TARGETFILE" bs=$BLOCKSIZE count=1 skip=$icpy seek=$icpy 2>/dev/null
            	    	#"$DDBIN" if="$FILEPATH" bs=$BLOCKSIZE count=1 skip=$icpy 2>/dev/null | cat > "$DDBIN" of="$TARGETFILE" bs=$BLOCKSIZE seek=$icpy 2>/dev/null
	    	    fi
	    	else
            	    "$DDBIN" if="$FILEPATH" of="$TARGETFILE" bs=$BLOCKSIZE count=1 skip=$icpy seek=$icpy 2>/dev/null
	    	fi
	    else
	        if [ "$HASH" != "$SHA1ZERO" ]
	        then
	            #dd if="$FILEPATH" bs=$BLOCKSIZE count=1 skip=$icpy conv=notrunc 2>/dev/null | ssh $( echo "$RSSSHOPTS" "$SSHOPTS" ) -p"$xcNETPort" ${defremusr}@"$xcNETIPv4" "cat >> \"$xcNETPath/$FILENAME\" && echo $HASH >> \"$xcNETPath/${FILENAME}.hmap\""
	            SRVPID=$( ssh $( echo "$RSSSHOPTS" "$SSHOPTS" ) -p"$xcNETPort" ${defremusr}@"$xcNETIPv4" "nohup \"$xsidefaultpath/bin/xsidiff\" $xcNETIPv4:33 \"$xcNETPath/$FILENAME\"" ) && \
	            "$PWD"/bin/xsidiff "$FILEPATH" $xcNETIPv4:33 $(( $icpy*16384 )) $(( $BLOCKSIZE/16384 ))
	            echo "REMOTE SRV PID: $SRVPID"
	            #ssh $( echo "$RSSSHOPTS" "$SSHOPTS" ) -p"$xcNETPort" ${defremusr}@"$xcNETIPv4" "kill -9 $SRVPID"
	    	else
	            ssh -f $( echo "$SSHOPTS" ) -p"$xcNETPort" ${defremusr}@"$xcNETIPv4" "dd if=/dev/zero of=\"$xcNETPath/$FILENAME\" bs=$BLOCKSIZE count=1 seek=$icpy 2>/dev/null && echo $HASH >> \"$xcNETPath/${FILENAME}.hmap\""
	    	fi
	    fi
	icpy=$(( $icpy+1 ))
        done
	echo ""
        END=$(date +%s)
        TIMEDIFF=$(( $END - $START + 1 ))
        #echo "BLOCKCNT: $BLOCKCNT"
        echo "Time taken: $TIMEDIFF"
        SPEED=$( python -c "print($FILESIZE/1048576/$TIMEDIFF)" )
        echo "Avg speed: $SPEED mb/s"

elif [ "$1" == "restore" ]
then
	FILEPATH="$2"
	if [ ! -f "$FILEPATH" ]
	then
	    echo "$FILEPATH does not exist"
	    exit 0	
	fi	
	FILENAME=$( basename "$FILEPATH" )
	FILESIZE=$( cat "$FILEPATH".info | grep fsize | awk -F ': ' '{print $2}' )
	DISKUSAG=$( cat "$FILEPATH".info | grep usage | awk -F ': ' '{print $2}' )
        BLOCKSIZE=$( cat "$FILEPATH".info | grep bsize | awk -F ': ' '{print $2}' )
        SHA1ZERO=$( getSha1Zero "$BLOCKSIZE" )
        BLOCKCOMP=$( cat "$FILEPATH".info | grep bcomp | awk -F ': ' '{print $2}' )
	RTTARGET=$( dirname $( dirname $( dirname "$2" ) ) )
        DTTARGET="$RTTARGET"/data
	RETARGET=$( dirname "$3" )
	BLOCKCNT=$( cat "$FILEPATH" | wc -l )

        SUBBLKSIZ=1048576
        SUBBLKCNT=$(( $BLOCKSIZE/$SUBBLKSIZ ))

        writeout "File size: $FILESIZE"

	if [ "$BLOCKCOMP" == "1" ]
	then
	    #TMPFile=$( mktemp xsitools.XXXXXX )	
	    TMPFile="/tmp/xsitools.tmp"	
	fi

	# 1M block count
	COUNT=$( python -c "print(int($FILESIZE/1048576))" )
	echo "Creating restore file..."
	# 1M block array # "$DDBIN" of="$3" bs=1048576 seek=$COUNT count=0
	"$DDBIN" of="$3" bs=1 seek=$FILESIZE count=0
	drawline
	echo "Created restore file, size: $( ls -las "$3" | awk '{print $6}' )"
	
	# LZOP only extracts 4k at a time, so we have to deal with that
	# DDCOUNT=$(( $BLOCKSIZE/4096 ))	
	
	START=$(date +%s)
	irst=0
	nzblks=0
	cat "$FILEPATH" | while read hash
	do
	    if [ "$irst" -eq "$(( $BLOCKCNT-1 ))" ]
	    then
	    	#INXS=$( python -c "print ('0') if ($FILESIZE/float($SUBBLKSIZ))==(int($FILESIZE/$SUBBLKSIZ)) else ('1')" )
	    	SUBBLKCNT=$(( ${FILESIZE}%${BLOCKSIZE}/${SUBBLKSIZ}+1 ))	 
	    fi
	    echo -ne "Processed $(( $irst*100/$BLOCKCNT ))%\033[0K\r"
            FstL=${hash:0:1}
            SndL=${hash:1:1}
	    TrdL=${hash:2:1}
            HASHDIR="$DTTARGET"/"$FstL"/"$SndL"/"$TrdL"
	    if [ -f "$HASHDIR/$hash" ]
	    then
	    	if [ "$hash" != "$SHA1ZERO" ]
	    	then
	    	    if [ "$BLOCKCOMP" != "1" ]
	    	    then
	    	    	"$DDBIN" conv=notrunc if="$HASHDIR/$hash" of="$3" bs=$SUBBLKSIZ count=$SUBBLKCNT seek=$(( $irst*$SUBBLKCNT )) 2>"$RETARGET"/xsitools-dd.log
	    	    	#"$DDBIN" conv=notrunc if="$HASHDIR/$hash" of="$3" bs=$BLOCKSIZE count=1 seek=$irst 2>"$RETARGET"/xsitools-dd.log
	    	    else
	    	        "$LZBIN" -d -ff < "$HASHDIR/$hash" | cat > "$TMPFile"
	    	        "$DDBIN" conv=notrunc if="$TMPFile" of="$3" bs=$SUBBLKSIZ count=$SUBBLKCNT seek=$(( $irst*$SUBBLKCNT )) 2>>"$RETARGET"/xsitools-dd.log
	    	        #"$DDBIN" conv=notrunc if="$TMPFile" of="$3" bs=$BLOCKSIZE count=1 seek=$irst 2>>"$RETARGET"/xsitools-dd.log
	    	        #DDSEEK=$( python -c "print($irst*$BLOCKSIZE/4096)" )
	    	        #DDSEEK=$(( ($BLOCKSIZE/4096)*$irst ))
	    	        #"$LZBIN" -d -ff < "$HASHDIR/$hash" | "$DDBIN" conv=notrunc of="$3" bs=4096 count=$DDCOUNT seek=$DDSEEK 2>>"$RETARGET"/xsitools-dd.log
	    	    fi	
	    	fi
	    else
	    	writeout "Broken backup, missing chunk $hash"
	    fi
	irst=$(( $irst+1 ))
	done

        END=$(date +%s)
        TIMEDIFF=$(( $END - $START + 1 ))
        echo "Time taken: $TIMEDIFF"
fi

}
